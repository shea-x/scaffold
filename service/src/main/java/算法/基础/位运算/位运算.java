package 算法.基础.位运算;

public class 位运算 {
    /**
     * 位运算之异或运算    异或运算--无进位相加     相同为0，不同为1
     * 异或运算有三个特性：
     *
     * 0和任何数字异或永远等于该数字，0^4=4
     * 两个相同的数字异或等于0，2^2=0
     * 异或满足交换律和结合律，例如a^b=b^a,(a^b)^c=a^(b^c)
     * 所以在一个数组中，除了一个数字只出现过一次，而其他数字都出现过两次，则求解该数组中只出现过一次的数字，则可以用异或的方法。
     */


    /**
     * 按位与运算符(&)  同时为1才为1，否则为0
     *
     * 参加运算的两个数，按二进制位进行“与”运算。
     *
     * 运算规则：只有两个数的二进制同时为1，结果才为1，否则为0。(负数按补码形式参加按位与运算)
     *
     * 即 0 & 0= 0 ，0 & 1= 0，1 & 0= 0， 1 & 1= 1。
     *
     * 例：3 &5  即 00000011 & 00000101 = 00000001 ，所以 3 & 5的值为1。
     */

    /**
     * 按位或运算符(|)    有1则为1，否则为0
     *
     * 参加运算的两个数，按二进制位进行“或”运算。
     *
     * 运算规则：参加运算的两个数只要两个数中的一个为1，结果就为1。
     *
     * 即  0 | 0= 0 ,  1 | 0= 1  ， 0 | 1= 1  ,  1 | 1= 1 。
     *
     * 例：2 | 4 即 00000010 | 00000100 = 00000110 ，所以2 | 4的值为 6 。
     */



}
